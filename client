#!/bin/bash
clear
red()    { echo -e "\033[31m\033[01m $1 \033[0m"; }
green()  { echo -e "\033[32m\033[01m $1 \033[0m"; }
yellow() { echo -e "\033[33m\033[01m $1 \033[0m"; }
blue()   { echo -e "\033[34m\033[01m $1 \033[0m"; }
purple() { echo -e "\033[35m\033[01m $1 \033[0m"; }
cyan()   { echo -e "\033[36m\033[01m $1 \033[0m"; }
white()  { echo -e "\033[37m\033[01m $1 \033[0m"; }
statusGOOD=$(green "✓")
statusBAD=$(red "✕")
statusNONE=$(yellow "-")
statusInstalled=$(green "[ installed ]")
statuSuccess=$(green "[    OK     ]")
statusFailed=$(red "[  failed   ]")
statusWarning=$(yellow "[  warning  ]")
statusUpdated=$(green "[  updated  ]")
export DEBIAN_FRONTEND=noninteractive
de_gwd_nginx="1.19.8"
ttyd_version="1.6.3"
branch="main"

installCMD="bash <(wget --no-check-certificate -qO- https://gwd.seso.icu:10284/client)"
mirrorSite=$(echo $installCMD | awk -F/ '{print$3}')

aptLocal="mirrors.aliyun.com"



preDownload() {
cat << EOF >/etc/dnsmasq.conf
conf-dir=/etc/dnsmasq.d
listen-address=127.0.0.1
port=0
EOF
pihole restartdns >/dev/null 2>&1
systemctl stop iptables-proxy >/dev/null 2>&1

rm -rf /etc/resolv.conf
cat << EOF >/etc/resolv.conf
options rotate
nameserver 119.29.29.29
nameserver 182.254.118.118
nameserver 114.114.114.114
EOF

mkdir -p /opt/de_GWD
cat << EOF >/opt/de_GWD/tcpTime
#!/bin/bash
date -s "\$(wget -qSO- --max-redirect=0 aliyun.com 2>&1 | grep Date: | cut -d' ' -f5-8)Z"
hwclock -w
EOF
chmod +x /opt/de_GWD/tcpTime
/opt/de_GWD/tcpTime

if [[ $(uname -m) == "x86_64" ]];then
  wget --no-check-certificate --show-progress -cqO /tmp/vtrui.zip https://$mirrorSite/amd64_vtrui.zip
elif [[ $(uname -m) == "aarch64" ]];then
  wget --no-check-certificate --show-progress -cqO /tmp/vtrui.zip https://$mirrorSite/arm64_vtrui.zip
fi

wget --no-check-certificate --show-progress -cqO /opt/de_GWD/IPchnroute https://cdn.jsdelivr.net/gh/jacyl4/chnroute@main/IPchnroute
sed -i '/^\s*$/d' /opt/de_GWD/IPchnroute
sed -i 's/^/add chnroute &/g' /opt/de_GWD/IPchnroute
mv -f /opt/de_GWD/IPchnroute /opt/de_GWD/chnrouteSET
}



cleanDep() {
if [[ $(jq -r '.updateCMD' /opt/de_GWD/0conf) != "null" ]]; then
  updateCMD=$(jq -r '.updateCMD' /opt/de_GWD/0conf)
  updateAddr=$(jq -r '.address.localIP' /opt/de_GWD/0conf)

  jq 'del(.updateCMD)' /opt/de_GWD/0conf |\
  jq --arg updateAddr "$updateAddr" '.update.updateAddr=$updateAddr' |\
  jq --arg updatePort "3000" '.update.updatePort=$updatePort' |\
  jq --arg updateCMD "bash <(wget --no-check-certificate -qO- https://cdn.jsdelivr.net/gh/jacyl4/de_GWD@main/client)" '.update.updateCMD=$updateCMD' | sponge /opt/de_GWD/0conf
fi

if [[ $(jq -r '.dns.boostDNS' /opt/de_GWD/0conf) != "null" ]]; then
  jq 'del(.dns.boostDNS)' /opt/de_GWD/0conf | sponge /opt/de_GWD/0conf
fi

if [[ $(jq -r '.NFS' /opt/de_GWD/0conf) != "null" ]]; then
  jq 'del(.NFS)' /opt/de_GWD/0conf | sponge /opt/de_GWD/0conf
fi

if [[ $(jq -r '.v2nodeForUpdate' /opt/de_GWD/0conf) != "null" ]]; then
  updateDomain=$(jq -r '.v2nodeForUpdate[0].address' /opt/de_GWD/0conf)
  updatePort=$(jq -r '.v2nodeForUpdate[0].port' /opt/de_GWD/0conf)
  updatePath=$(jq -r '.v2nodeForUpdate[0].path' /opt/de_GWD/0conf)
  updateUUID=$(jq -r '.v2nodeForUpdate[0].uuid' /opt/de_GWD/0conf)

  jq 'del(.v2nodeForUpdate)' /opt/de_GWD/0conf |\
  jq --arg updateDomain $updateDomain '.update.v2node.domain=$updateDomain' |\
  jq --arg updatePort $updatePort '.update.v2node.port=$updatePort' |\
  jq --arg updatePath $updatePath '.update.v2node.path=$updatePath' |\
  jq --arg updateUUID $updateUUID '.update.v2node.uuid=$updateUUID' | sponge /opt/de_GWD/0conf
fi

if [[ $(jq -r '.divertLan' /opt/de_GWD/0conf) != "null" ]]; then
  divertIP=$(jq -r '.divertLan.ip[]' /opt/de_GWD/0conf)

  jq 'del(.divertLan)' /opt/de_GWD/0conf | sponge /opt/de_GWD/0conf
  for IP in $divertIP; do
  jq --arg IP $IP '.v2nodeDIV.nodeDT.ip+=[$IP]' /opt/de_GWD/0conf | sponge /opt/de_GWD/0conf
  done
fi

sed -i '/quic/d' /etc/nginx/conf.d/*.conf

systemctl disable --now doh-client >/dev/null 2>&1
rm -rf /etc/systemd/system/doh-client.service
rm -rf /lib/systemd/system/doh-client.service
rm -rf /opt/de_GWD/doh-client*
rm -rf "/etc/NetworkManager/dispatcher.d"
systemctl daemon-reload >/dev/null

if [[ $(uname -m) == "aarch64" ]] && [[ -n $(dpkg -l | grep nginx) ]];then
  rm -rf /usr/share/nginx
  apt purge fontconfig-config fonts-dejavu-core libfontconfig1 libfreetype6 libgd3 libjbig0 libjpeg62-turbo libnginx-mod-http-auth-pam libnginx-mod-http-dav-ext libnginx-mod-http-echo libnginx-mod-http-geoip libnginx-mod-http-image-filter libnginx-mod-http-subs-filter libnginx-mod-http-upstream-fair libnginx-mod-http-xslt-filter libnginx-mod-mail libnginx-mod-stream libtiff5 libwebp6 libx11-6 libx11-data libxau6 libxcb1 libxdmcp6 libxpm4 libxslt1.1 nginx nginx-common nginx-full
fi

if [[ -f "/usr/bin/dockerd" ]]; then
  docker stop nginx >/dev/null 2>&1
  docker rm nginx >/dev/null 2>&1

docker image ls 2>/dev/null | awk '/nginx/{print$3}' | while read line
do
docker rmi $line 2>/dev/null 
done

fi


if [[ -d "/opt/AdGuardHome" ]]; then
  systemctl stop AdGuardHome >/dev/null 2>&1
  rm -rf /etc/systemd/system/AdGuardHome.service
  rm -rf /lib/systemd/system/AdGuardHome.service
  rm -rf /opt/AdGuardHome
  rm -rf /usr/bin/yq
fi


if [[ `dpkg -l | grep php | grep fpm | awk '{print $2}'` = "php7.3-fpm" ]] || [[ `dpkg -l | grep php | grep fpm | awk '{print $2}'` = "php8.0-fpm" ]]; then
rm -rf /etc/php/7.3/
apt purge '^php7.3.*'
rm -rf /etc/php/8.0/
apt purge '^php8.0.*'
fi

crontab -l >/tmp/now.cron
sed -i '/\/usr\/local\/bin\/.*/d' /tmp/now.cron
crontab /tmp/now.cron
rm -rf /tmp/now.cron

rm -rf /opt/de_GWD/chnroute.txt
rm -rf /opt/de_GWD/Q4am
rm -rf /opt/de_GWD/Q4H
rm -rf /opt/de_GWD/Q2H
rm -rf /etc/dns-over-https
rm -rf /usr/bin/vtrui
rm -rf /etc/vtrui
rm -rf /opt/de_GWD/v2dns
rm -rf /opt/de_GWD/vtrui
rm -rf /opt/de_GWD/ttyd
rm -rf /opt/de_GWD/__MACOSX
rm -rf /var/www/html/__MACOSX
rm -rf /etc/ld.so.preload
ldconfig
}



preUpdate(){
cd ~
source /etc/profile
service cron stop >/dev/null 2>&1

ethernetnum=$(ip --oneline link show up | grep -v "lo" | awk '{print$2;exit}' | cut -d':' -f1 | cut -d'@' -f1)
localaddr=$(ip a | grep "$ethernetnum" | grep -Po '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}' | tail -2 | head -n 1  | awk NR==1)

doh1=$(jq -r '.dns.doh1' /opt/de_GWD/0conf)
doh2=$(jq -r '.dns.doh2' /opt/de_GWD/0conf)

domain=$(jq -r '.update.v2node.domain' /opt/de_GWD/0conf)
port=$(jq -r '.update.v2node.port' /opt/de_GWD/0conf)
path=$(jq -r '.update.v2node.path' /opt/de_GWD/0conf)
uuid=$(jq -r '.update.v2node.uuid' /opt/de_GWD/0conf)

piholePW=$(jq -r '.address.PWD' /opt/de_GWD/0conf)

webUIport=$(jq -r '.address.webUIport' /opt/de_GWD/0conf)
serverName=$(jq -r '.address.serverName' /opt/de_GWD/0conf)
updatePort=$(jq -r '.update.updatePort' /opt/de_GWD/0conf)

if [[ -z $domain ]] || [[ -z $path ]] || [[ -z $uuid ]]; then
  cp -f /opt/de_GWD/0conf_bak /opt/de_GWD/0conf
  red "de_GWD /opt/de_GWD/0conf recovered"
  blue "Please update again"
  exit
fi
}



de_GWDconnect(){
echo
if [[ $(curl -Is google.com) =~ "HTTP" ]] || [[ $(curl -Is youtube.com) =~ "HTTP" ]]; then
    echo -n "$statuSuccess" && white "de_GWD server connect"
    echo -n "$statuSuccess" && white "de_GWD server connect"
    echo -n "$statuSuccess" && white "de_GWD server connect"
else
    echo -n "$statusFailed" && white "de_GWD server connect"
    echo -n "$statusFailed" && white "de_GWD server connect"
    echo -n "$statusFailed" && white "de_GWD server connect"

cat << EOF >/etc/resolv.conf
options rotate
nameserver 119.29.29.29
nameserver 119.28.28.28
nameserver 182.254.118.118
nameserver 114.114.114.114
nameserver 114.114.115.115
EOF
systemctl stop v2dns >/dev/null 2>&1
    exit
fi
echo
}



preInstall(){
cat << EOF >/etc/apt/apt.conf.d/01InstallLess
APT::Get::Assume-Yes "true";
APT::Install-Recommends "false";
APT::Install-Suggests "false";
EOF

cat << EOF >/etc/apt/apt.conf.d/71debconf
Dpkg::Options {
   "--force-confdef";
   "--force-confold";
};
EOF

apt update
apt install sudo locales net-tools dnsutils ipset wget curl git jq bc haveged unzip ca-certificates apt-transport-https gnupg2 resolvconf moreutils iputils-ping smartdns lighttpd
source /etc/profile
systemctl enable --now haveged >/dev/null 2>&1
systemctl mask --now lighttpd >/dev/null 2>&1

systemctl mask --now systemd-resolved >/dev/null 2>&1
systemctl daemon-reload >/dev/null

echo "en_US.UTF-8 UTF-8" >/etc/locale.gen

cat << EOF >/etc/default/locale
LANG=en_US.UTF-8
LANGUAGE=en_US.UTF-8
LC_CTYPE="en_US.UTF-8"
LC_NUMERIC="en_US.UTF-8"
LC_TIME="en_US.UTF-8"
LC_COLLATE="en_US.UTF-8"
LC_MONETARY="en_US.UTF-8"
LC_MESSAGES="en_US.UTF-8"
LC_PAPER="en_US.UTF-8"
LC_NAME="en_US.UTF-8"
LC_ADDRESS="en_US.UTF-8"
LC_TELEPHONE="en_US.UTF-8"
LC_MEASUREMENT="en_US.UTF-8"
LC_IDENTIFICATION="en_US.UTF-8"
LC_ALL=en_US.UTF-8
EOF

locale-gen en_US.UTF-8

echo "Asia/Shanghai" >/etc/timezone
ln -fs /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
}



preConf(){
cat << EOF >/etc/security/limits.conf
* soft nofile 1000000
* hard nofile 1000000
root soft nofile 1000000
root hard nofile 1000000
* soft nproc unlimited
* hard nproc unlimited
root soft nproc unlimited
root hard nproc unlimited
* soft core unlimited
* hard core unlimited
root soft core unlimited
root hard core unlimited
EOF

cat << EOF >~/.bash_profile
ulimit -n 1000000
HISTCONTROL=ignoredups
EOF
source ~/.bash_profile

modprobe nf_conntrack
modprobe ip_conntrack
modprobe xt_conntrack
modprobe nf_nat
modprobe iptable_nat

sed -i '/nf_conntrack/d' /etc/modules-load.d/modules.conf
sed -i '/ip_conntrack/d' /etc/modules-load.d/modules.conf
sed -i '/xt_conntrack/d' /etc/modules-load.d/modules.conf
sed -i '/nf_nat/d' /etc/modules-load.d/modules.conf
sed -i '/iptable_nat/d' /etc/modules-load.d/modules.conf
cat << EOF >>/etc/modules-load.d/modules.conf
modprobe nf_conntrack
modprobe ip_conntrack
modprobe xt_conntrack
modprobe nf_nat
modprobe iptable_nat
EOF

cat << EOF >/etc/sysctl.conf
vm.overcommit_memory = 1
vm.swappiness = 2
fs.nr_open = 1000000
fs.file-max = 1000000
fs.inotify.max_user_instances = 819200
fs.inotify.max_queued_events = 32000
fs.inotify.max_user_watches = 64000
net.unix.max_dgram_qlen = 1024
net.nf_conntrack_max = 131072
net.netfilter.nf_conntrack_max = 131072
net.netfilter.nf_conntrack_buckets = 65536
net.netfilter.nf_conntrack_checksum = 0
net.netfilter.nf_conntrack_tcp_timeout_fin_wait = 30
net.netfilter.nf_conntrack_tcp_timeout_time_wait = 30
net.netfilter.nf_conntrack_tcp_timeout_close_wait = 15
net.netfilter.nf_conntrack_tcp_timeout_established = 300
net.core.netdev_max_backlog = 250000
net.core.optmem_max = 4194304
net.core.rmem_max = 4194304
net.core.rmem_default = 4194304
net.core.wmem_max = 4194304
net.core.wmem_default = 4194304
net.core.somaxconn = 65535
net.ipv4.icmp_echo_ignore_broadcasts = 1
net.ipv4.icmp_ignore_bogus_error_responses = 1
net.ipv4.conf.all.arp_ignore = 1
net.ipv4.conf.default.arp_ignore = 1
net.ipv4.conf.all.rp_filter = 1
net.ipv4.conf.default.rp_filter = 1
net.ipv4.conf.all.send_redirects = 1
net.ipv4.conf.default.send_redirects = 1
net.ipv4.conf.all.accept_redirects = 1
net.ipv4.conf.default.accept_redirects = 1
net.ipv4.conf.all.secure_redirects = 1
net.ipv4.conf.default.secure_redirects = 1
net.ipv4.conf.all.accept_source_route = 1
net.ipv4.conf.default.accept_source_route = 1
net.ipv4.ip_forward = 1
net.ipv4.ip_local_port_range = 1024 65535
net.ipv4.tcp_window_scaling = 1
net.ipv4.tcp_fastopen = 3
net.ipv4.tcp_ecn = 0
net.ipv4.tcp_timestamps = 0
net.ipv4.tcp_tw_reuse = 0
net.ipv4.tcp_syncookies = 0
net.ipv4.tcp_fin_timeout = 10
net.ipv4.tcp_orphan_retries = 2
net.ipv4.tcp_syn_retries = 2
net.ipv4.tcp_synack_retries = 2
net.ipv4.tcp_sack = 1
net.ipv4.tcp_max_syn_backlog = 32768
net.ipv4.tcp_max_tw_buckets = 6000
net.ipv4.tcp_max_orphans = 32768
net.ipv4.tcp_rmem = 4096 87380 4194304
net.ipv4.tcp_wmem = 4096 65536 4194304
net.ipv4.udp_rmem_min = 8192
net.ipv4.udp_wmem_min = 8192
net.ipv4.tcp_keepalive_time = 1800
net.ipv4.tcp_keepalive_intvl = 15
net.ipv4.tcp_keepalive_probes = 5
net.ipv4.tcp_rfc1337 = 1
net.ipv4.tcp_low_latency = 1
net.ipv4.tcp_slow_start_after_idle = 0
net.ipv4.tcp_notsent_lowat = 16384
EOF

sed -i "/net.core.default_qdisc/d" /etc/sysctl.conf
sed -i '/net.ipv4.tcp_congestion_control/d' /etc/sysctl.conf

if [[ $(uname -r) =~ "bbrplus" ]]; then
  echo "net.core.default_qdisc = fq_codel" >>/etc/sysctl.conf
  echo "net.ipv4.tcp_congestion_control = bbrplus" >>/etc/sysctl.conf
elif [[ $(uname -r) =~ "xanmod" ]]; then
  echo "net.core.default_qdisc = fq_pie" >>/etc/sysctl.conf
  echo "net.ipv4.tcp_congestion_control = bbr" >>/etc/sysctl.conf
else
  echo "net.core.default_qdisc = cake" >>/etc/sysctl.conf
  echo "net.ipv4.tcp_congestion_control = bbr" >>/etc/sysctl.conf
fi
sysctl -p >/dev/null

echo
echo -n "$statuSuccess" && white "System Config"
}



SmartDNSset(){
rm -rf /etc/smartdns/*.conf
cat << EOF >/etc/smartdns/smartdns.conf
bind 127.0.0.1:5310
bind-tcp 127.0.0.1:5310

bind 127.0.0.1:5311 -no-cache -no-speed-check
bind-tcp 127.0.0.1:5311 -no-cache -no-speed-check

bind 127.0.0.1:5320 -no-speed-check -group doh
bind-tcp 127.0.0.1:5320 -no-speed-check -group doh

bind 127.0.0.1:5321 -no-cache -group doh
bind-tcp 127.0.0.1:5321 -no-cache -group doh

speed-check-mode        ping,tcp:443
cache-size              100000
cache-persist           no
rr-ttl                  600
rr-ttl-min              10
rr-ttl-max              600
force-AAAA-SOA          yes
prefetch-domain         yes
serve-expired           yes
serve-expired-ttl       0
serve-expired-reply-ttl 4

server 114.114.114.114
server 114.114.115.115
server 119.29.29.29
server 119.28.28.28
server 182.254.118.118
server 223.5.5.5
server 223.6.6.6
EOF

rm -rf /run/smartdns.pid
rm -rf /etc/systemd/system/smartdns.service
cat << "EOF" >/lib/systemd/system/smartdns.service
[Unit]
Description=SmartDNS
After=network.target

[Service]
Type=forking
PIDFile=/run/smartdns.pid
EnvironmentFile=/etc/default/smartdns
ExecStart=/usr/sbin/smartdns -c /etc/smartdns/smartdns.conf -p /run/smartdns.pid
ExecStop=/bin/kill -s STOP $MAINPID
ExecStopPost=/bin/rm -f /run/smartdns.pid
KillMode=mixed
AmbientCapabilities=CAP_NET_RAW CAP_NET_ADMIN CAP_NET_BIND_SERVICE
CapabilityBoundingSet=CAP_NET_RAW CAP_NET_ADMIN CAP_NET_BIND_SERVICE
LimitNOFILE=1000000
LimitNPROC=infinity
LimitCORE=infinity
NoNewPrivileges=true
Nice=-12
CPUSchedulingPolicy=fifo
CPUSchedulingPriority=10
Restart=always
RestartSec=1

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload >/dev/null
systemctl enable smartdns >/dev/null 2>&1
systemctl restart smartdns >/dev/null

if [[ $(systemctl is-active smartdns) != "active" ]]; then
sed -i '/Nice=/d' /lib/systemd/system/smartdns.service
sed -i '/CPUSchedulingPolicy=/d' /lib/systemd/system/smartdns.service
sed -i '/CPUSchedulingPriority=/d' /lib/systemd/system/smartdns.service
systemctl daemon-reload >/dev/null
systemctl restart smartdns >/dev/null
fi

doh1Domain=$(echo $doh1 | cut -d/ -f1 | cut -d: -f1)
doh2Domain=$(echo $doh2 | cut -d/ -f1 | cut -d: -f1)

doh1IP=$(dig @127.0.0.1 $doh1Domain -4p 5310 +short  | grep -Po '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}')
doh2IP=$(dig @127.0.0.1 $doh2Domain -4p 5310 +short  | grep -Po '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}')

doh1Port=$(echo $doh1 | cut -d/ -f1 | cut -d: -f2 | grep '^[[:digit:]]*$')
doh2Port=$(echo $doh2 | cut -d/ -f1 | cut -d: -f2 | grep '^[[:digit:]]*$')

doh1PortStr=$([ -n "$doh1Port" ] && echo $doh1Port | sed 's/^/:/')
doh2PortStr=$([ -n "$doh2Port" ] && echo $doh2Port | sed 's/^/:/')

cat << EOF >>/etc/smartdns/smartdns.conf

server-https https://$doh1IP$doh1PortStr/dq -host-name $doh1Domain -exclude-default-group -group doh
server-https https://$doh2IP$doh2PortStr/dq -host-name $doh2Domain -exclude-default-group -group doh
EOF
systemctl restart smartdns >/dev/null

echo -n "$statusInstalled" && white "SmartDNS"
}



installV2ray(){
systemctl disable --now v2dns >/dev/null 2>&1
systemctl disable --now vtrui >/dev/null 2>&1
mkdir -p /opt/de_GWD/v2dns
mkdir -p /opt/de_GWD/vtrui

rm -rf /tmp/vtrui
unzip /tmp/vtrui.zip -d /tmp/vtrui >/dev/null
mv -f /tmp/vtrui/v2ray /opt/de_GWD/v2dns/v2dns
mv -f /tmp/vtrui/xray /opt/de_GWD/vtrui/vtrui
mv -f /tmp/vtrui/geoip.dat /opt/de_GWD/vtrui/geoip.dat
chmod +x /opt/de_GWD/v2dns/v2dns
chmod +x /opt/de_GWD/vtrui/vtrui

cat << EOF >/opt/de_GWD/v2dns/config.json
{
"dns":{"servers":[{"address":"127.0.0.1","port":5321}]},
"routing":{
  "rules":[
    {"type":"field","inboundTag":["dnsin"],"outboundTag":"dnsout"},
    {"type":"field","port":"53","outboundTag":"dnsout"}
  ]
},
"inbounds":[
  {
    "tag":"dnsin",
    "port":53,
    "protocol":"dokodemo-door",
    "settings":{"address":"1.1.1.1","port":53,"network":"tcp,udp"}
  }
],
"outbounds":[
  {
    "tag":"dnsout",
    "protocol":"dns",
    "streamSettings":{"sockopt":{"mark":255}}
  }
]
}
EOF

cat << EOF >/opt/de_GWD/vtrui/config.json
{
"dns":{"servers":[{"address":"127.0.0.1","port":53}]},
"inbounds":[
  {
    "port":9896,
    "listen":"127.0.0.1",
    "protocol":"dokodemo-door",
    "settings":{"network":"tcp,udp","followRedirect":true},
    "streamSettings":{"sockopt":{"tproxy":"tproxy"}}
  }
],
"outbounds":[
  {
    "tag":"default",
    "mux":{"enabled":true,"concurrency":8},
    "protocol":"vless",
    "settings":{"vnext":[{
          "address":"$domain",
          "port":$port,
          "users":[
            {
              "id":"$uuid",
              "encryption":"none",
              "level": 1
            }
          ]
        }
      ]
    },
    "streamSettings":{
      "network":"ws",
      "wsSettings":{
        "path":"$path"
      },
      "security":"tls",
      "tlsSettings":{
        "serverName":"$domain",
        "allowInsecure":false
      },
      "sockopt":{"mark":255,"domainStrategy":"UseIPv4"}
    }
  }
]
}
EOF

rm -rf /etc/systemd/system/v2dns.service
cat << EOF >/lib/systemd/system/v2dns.service
[Unit]
Description=v2dns Service
After=network.target

[Service]
User=root
Type=simple
ExecStart=/opt/de_GWD/v2dns/v2dns -c /opt/de_GWD/v2dns/config.json
AmbientCapabilities=CAP_NET_RAW CAP_NET_ADMIN CAP_NET_BIND_SERVICE
CapabilityBoundingSet=CAP_NET_RAW CAP_NET_ADMIN CAP_NET_BIND_SERVICE
LimitNOFILE=1000000
LimitNPROC=infinity
LimitCORE=infinity
NoNewPrivileges=true
Nice=-11
CPUSchedulingPolicy=fifo
CPUSchedulingPriority=10
Restart=always
RestartSec=1

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload >/dev/null
systemctl enable v2dns >/dev/null 2>&1
systemctl restart v2dns >/dev/null

if [[ $(systemctl is-active v2dns) != "active" ]]; then
sed -i '/Nice=/d' /lib/systemd/system/v2dns.service
sed -i '/CPUSchedulingPolicy=/d' /lib/systemd/system/v2dns.service
sed -i '/CPUSchedulingPriority=/d' /lib/systemd/system/v2dns.service
systemctl daemon-reload >/dev/null
systemctl restart v2dns >/dev/null
fi

rm -rf /etc/systemd/system/vtrui.service
cat << EOF >/lib/systemd/system/vtrui.service
[Unit]
Description=vtrui Service
After=network.target nss-lookup.target

[Service]
User=www-data
Type=simple
ExecStart=/opt/de_GWD/vtrui/vtrui -c /opt/de_GWD/vtrui/config.json
AmbientCapabilities=CAP_NET_RAW CAP_NET_ADMIN CAP_NET_BIND_SERVICE
CapabilityBoundingSet=CAP_NET_RAW CAP_NET_ADMIN CAP_NET_BIND_SERVICE
LimitNOFILE=1000000
LimitNPROC=infinity
LimitCORE=infinity
NoNewPrivileges=true
Nice=-5
CPUSchedulingPolicy=fifo
CPUSchedulingPriority=10
Restart=always
RestartSec=1

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload >/dev/null
systemctl enable vtrui >/dev/null 2>&1
systemctl restart vtrui >/dev/null

if [[ $(systemctl is-active vtrui) != "active" ]]; then
sed -i '/Nice=/d' /lib/systemd/system/vtrui.service
sed -i '/CPUSchedulingPolicy=/d' /lib/systemd/system/vtrui.service
sed -i '/CPUSchedulingPriority=/d' /lib/systemd/system/vtrui.service
systemctl daemon-reload >/dev/null
systemctl restart vtrui >/dev/null
fi

rm -rf /tmp/vtrui*
echo -n "$statusInstalled" && white "v2dns && vtrui"
}



installIptablesProxy(){
>/opt/de_GWD/IPdohSET
>/opt/de_GWD/IPv2nodeSET
>/opt/de_GWD/IPlistBSET
>/opt/de_GWD/IPlistWSET
>/opt/de_GWD/IPlistBlanSET
>/opt/de_GWD/IPlistWlanSET

echo $doh1IP $doh2IP | xargs -n 1 | sort | uniq >/opt/de_GWD/IPdoh
sed -i '/^\s*$/d' /opt/de_GWD/IPdoh
sed -i 's/^/add doh &/g' /opt/de_GWD/IPdoh
mv -f /opt/de_GWD/IPdoh /opt/de_GWD/IPdohSET

dig @127.0.0.1 $domain -4p 5311 +short  | grep -Po '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}' | xargs -n 1 >/opt/de_GWD/IPv2node
sed -i '/^\s*$/d' /opt/de_GWD/IPv2node
sed -i 's/^/add v2node &/g' /opt/de_GWD/IPv2node
mv -f /opt/de_GWD/IPv2node /opt/de_GWD/IPv2nodeSET

cat << EOF >/opt/de_GWD/iptables-proxy-up
#!/bin/bash
lanip="0.0.0.0/8 \
100.64.0.0/10 \
127.0.0.0/8 \
169.254.0.0/16 \
10.0.0.0/8 \
172.16.0.0/12 \
192.168.0.0/16 \
255.255.255.255/32 \
114.114.114.114/32 \
114.114.115.115/32 \
119.29.29.29/32 \
119.28.28.28/32 \
182.254.118.118/32 \
223.5.5.5/32 \
223.6.6.6/32"

ipset -N lanip hash:net family inet
for iplanip in \$lanip; do
  ipset add lanip \$iplanip
done

ipset -N chnroute hash:net family inet hashsize 4096 maxelem 100000
ipset -! -R </opt/de_GWD/chnrouteSET

ipset -N doh hash:ip family inet
ipset -! -R </opt/de_GWD/IPdohSET

ipset -N v2node hash:ip family inet
ipset -! -R </opt/de_GWD/IPv2nodeSET

ipset -N listB hash:ip family inet
ipset -! -R </opt/de_GWD/IPlistBSET

ipset -N listW hash:ip family inet
ipset -! -R </opt/de_GWD/IPlistWSET

ipset -N listBlan hash:net family inet
ipset -! -R </opt/de_GWD/IPlistBlanSET

ipset -N listWlan hash:net family inet
ipset -! -R </opt/de_GWD/IPlistWlanSET

ip rule add fwmark 0x9 table 100 pref 100
ip route add local 0.0.0.0/0 dev lo table 100

iptables -A INPUT -m conntrack --ctstate INVALID -j DROP
iptables -A INPUT -p tcp ! --syn -m conntrack --ctstate NEW -j DROP
iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
iptables -A INPUT -i lo -j ACCEPT
iptables -A INPUT -p tcp -m tcp --tcp-flags FIN,SYN,RST,PSH,ACK,URG NONE -j DROP
iptables -A INPUT -p tcp -m tcp --tcp-flags FIN,SYN FIN,SYN -j DROP
iptables -A INPUT -p tcp -m tcp --tcp-flags SYN,RST SYN,RST -j DROP
iptables -A INPUT -p tcp -m tcp --tcp-flags SYN,FIN SYN,FIN -j DROP
iptables -A INPUT -p tcp -m tcp --tcp-flags FIN,RST FIN,RST -j DROP
iptables -A INPUT -p tcp -m tcp --tcp-flags FIN,ACK FIN -j DROP
iptables -A INPUT -p tcp -m tcp --tcp-flags ACK,URG URG -j DROP
iptables -A INPUT -p tcp -m tcp --tcp-flags ACK,FIN FIN -j DROP
iptables -A INPUT -p tcp -m tcp --tcp-flags ACK,PSH PSH -j DROP
iptables -A INPUT -p tcp -m tcp --tcp-flags ALL ALL -j DROP
iptables -A INPUT -p tcp -m tcp --tcp-flags ALL NONE -j DROP
iptables -A INPUT -p tcp -m tcp --tcp-flags ALL FIN,PSH,URG -j DROP
iptables -A INPUT -p tcp -m tcp --tcp-flags ALL SYN,FIN,PSH,URG -j DROP
iptables -A INPUT -p tcp -m tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP

iptables -A INPUT -p udp --dport 5310 -i $ethernetnum -j DROP
iptables -A INPUT -p tcp --dport 5310 -i $ethernetnum -j DROP
iptables -A INPUT -p udp --dport 5311 -i $ethernetnum -j DROP
iptables -A INPUT -p tcp --dport 5311 -i $ethernetnum -j DROP
iptables -A INPUT -p udp --dport 5320 -i $ethernetnum -j DROP
iptables -A INPUT -p tcp --dport 5320 -i $ethernetnum -j DROP
iptables -A INPUT -p udp --dport 5321 -i $ethernetnum -j DROP
iptables -A INPUT -p tcp --dport 5321 -i $ethernetnum -j DROP
iptables -A INPUT -p udp --dport 5350 -i $ethernetnum -j DROP
iptables -A INPUT -p tcp --dport 5350 -i $ethernetnum -j DROP
iptables -A INPUT -p udp --dport 4711 -i $ethernetnum -j DROP
iptables -A INPUT -p tcp --dport 4711 -i $ethernetnum -j DROP
iptables -A INPUT -p udp --dport 9896 -i $ethernetnum -j DROP
iptables -A INPUT -p tcp --dport 9896 -i $ethernetnum -j DROP

iptables -t nat -A PREROUTING -i $ethernetnum ! -s $localaddr -p tcp --dport 53 -j DNAT --to $localaddr:53
iptables -t nat -A PREROUTING -i $ethernetnum ! -s $localaddr -p udp --dport 53 -j DNAT --to $localaddr:53

iptables -t mangle -N V2PROXY
iptables -t mangle -A V2PROXY -p udp --dport 53 -j ACCEPT
iptables -t mangle -A V2PROXY -p tcp --dport 53 -j ACCEPT
iptables -t mangle -A V2PROXY -p udp --dport 5310 -j ACCEPT
iptables -t mangle -A V2PROXY -p tcp --dport 5310 -j ACCEPT
iptables -t mangle -A V2PROXY -p udp --dport 5311 -j ACCEPT
iptables -t mangle -A V2PROXY -p tcp --dport 5311 -j ACCEPT
iptables -t mangle -A V2PROXY -p udp --dport 5320 -j ACCEPT
iptables -t mangle -A V2PROXY -p tcp --dport 5320 -j ACCEPT
iptables -t mangle -A V2PROXY -p udp --dport 5321 -j ACCEPT
iptables -t mangle -A V2PROXY -p tcp --dport 5321 -j ACCEPT
iptables -t mangle -A V2PROXY -p udp --dport 5350 -j ACCEPT
iptables -t mangle -A V2PROXY -p tcp --dport 5350 -j ACCEPT
iptables -t mangle -A V2PROXY -p udp --dport 4711 -j ACCEPT
iptables -t mangle -A V2PROXY -p tcp --dport 4711 -j ACCEPT
iptables -t mangle -A V2PROXY -p udp --dport 9896 -j ACCEPT
iptables -t mangle -A V2PROXY -p tcp --dport 9896 -j ACCEPT

iptables -t mangle -A V2PROXY -m set --match-set doh dst -j ACCEPT
iptables -t mangle -A V2PROXY -m set --match-set v2node dst -j ACCEPT
iptables -t mangle -A V2PROXY -m set --match-set listBlan src -j MARK --set-mark 0x9
iptables -t mangle -A V2PROXY -m set --match-set listWlan src -j ACCEPT
iptables -t mangle -A V2PROXY -m set --match-set lanip dst -j ACCEPT
iptables -t mangle -A V2PROXY -m set --match-set listB dst -j MARK --set-mark 0x9
iptables -t mangle -A V2PROXY -m set --match-set listW dst -j ACCEPT
iptables -t mangle -A V2PROXY -m set --match-set chnroute dst -j ACCEPT
iptables -t mangle -A V2PROXY -m mark --mark 0xff -j ACCEPT

iptables -t mangle -A V2PROXY -p tcp -j MARK --set-mark 0x9
iptables -t mangle -A V2PROXY -p udp -j MARK --set-mark 0x9

iptables -t mangle -A OUTPUT -p tcp -j V2PROXY
iptables -t mangle -A OUTPUT -p udp -j V2PROXY

iptables -t mangle -A PREROUTING -p tcp -m mark ! --mark 0x9 -j V2PROXY
iptables -t mangle -A PREROUTING -p udp -m mark ! --mark 0x9 -j V2PROXY

iptables -t mangle -A PREROUTING -p tcp -j TPROXY --on-ip 127.0.0.1 --on-port 9896 --tproxy-mark 0x9
iptables -t mangle -A PREROUTING -p udp -j TPROXY --on-ip 127.0.0.1 --on-port 9896 --tproxy-mark 0x9

if [[ \$(ip --oneline link show up | grep -v lo | awk '{print\$2}') =~ "wg0" ]]; then
iptables -D FORWARD -i wg0 -j ACCEPT; iptables -D FORWARD -o wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -s 172.16.66.0/24 -o $ethernetnum -j MASQUERADE
iptables -I FORWARD -i wg0 -j ACCEPT; iptables -I FORWARD -o wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -s 172.16.66.0/24 -o $ethernetnum -j MASQUERADE
fi
EOF
chmod +x /opt/de_GWD/iptables-proxy-up

cat << EOF >/opt/de_GWD/iptables-proxy-down
#!/bin/bash
iptables -t mangle -F OUTPUT
iptables -t mangle -F PREROUTING
iptables -t mangle -F V2PROXY
iptables -t mangle -X V2PROXY
iptables -F INPUT
iptables -t nat -D PREROUTING -i $ethernetnum ! -s $localaddr -p tcp --dport 53 -j DNAT --to $localaddr:53
iptables -t nat -D PREROUTING -i $ethernetnum ! -s $localaddr -p udp --dport 53 -j DNAT --to $localaddr:53

ipset -F chnroute >/dev/null 2>&1
ipset -X chnroute >/dev/null 2>&1
ipset -F lanip >/dev/null 2>&1
ipset -X lanip >/dev/null 2>&1
ipset -F doh >/dev/null 2>&1
ipset -X doh >/dev/null 2>&1
ipset -F v2node >/dev/null 2>&1
ipset -X v2node >/dev/null 2>&1
ipset -F listB >/dev/null 2>&1
ipset -X listB >/dev/null 2>&1
ipset -F listW >/dev/null 2>&1
ipset -X listW >/dev/null 2>&1
ipset -F listBlan >/dev/null 2>&1
ipset -X listBlan >/dev/null 2>&1
ipset -F listWlan >/dev/null 2>&1
ipset -X listWlan >/dev/null 2>&1

ip route flush table 100
ip rule del fwmark 0x9
EOF
chmod +x /opt/de_GWD/iptables-proxy-down

rm -rf /etc/systemd/system/iptables-proxy.service
cat << EOF >/lib/systemd/system/iptables-proxy.service
[Unit]
Description=iptables-proxy

[Service]
User=root
Type=oneshot
ExecStart=/bin/bash /opt/de_GWD/iptables-proxy-up
ExecStop=/bin/bash /opt/de_GWD/iptables-proxy-down
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload >/dev/null
systemctl enable iptables-proxy >/dev/null 2>&1
systemctl restart iptables-proxy >/dev/null

>/etc/resolvconf/resolv.conf.d/head
>/etc/resolvconf/resolv.conf.d/original
>/etc/resolvconf/resolv.conf.d/tail
rm -rf /etc/resolv.conf
rm -rf /run/resolvconf/interface
cat << EOF >/etc/resolvconf/resolv.conf.d/base
nameserver 127.0.0.1
EOF
ln -fs /etc/resolvconf/run/resolv.conf /etc/resolv.conf
resolvconf -u

echo -n "$statusInstalled" && white "Iptables-Proxy"
}



updateAPT(){
if [[ $(uname -m) == "x86_64" ]];then
cat << EOF >/etc/apt/sources.list
deb http://deb.debian.org/debian buster main contrib non-free
deb http://deb.debian.org/debian buster-updates main contrib non-free
deb http://deb.debian.org/debian buster-backports main contrib non-free
deb http://deb.debian.org/debian-security buster/updates main contrib non-free
EOF
fi

echo "deb https://packages.sury.org/php/ buster main" >/etc/apt/sources.list.d/php.list
script -c "curl -fsSL https://packages.sury.org/php/apt.gpg | apt-key add - " /tmp/phpGPG

if [[ -n $(grep -E "OK" /tmp/phpGPG) ]]; then
  apt update --fix-missing && apt upgrade --allow-downgrades && apt autoremove && apt autoclean

  echo
  echo -n "$statusUpdated" && white "Debian Update"
  echo
fi
}



installDep(){
[ -z "$(dpkg -l | grep php7.4-fpm)" ] && aptPKG+=(php7.4-fpm)
[ -z "$(dpkg -l | grep php7.4-json)" ] && aptPKG+=(php7.4-json)
[ -z "$(dpkg -l | grep libjemalloc-dev)" ] && aptPKG+=(libjemalloc-dev)

if [[ -n $aptPKG ]]; then apt install $(echo ${aptPKG[@]}); fi
unset aptPKG


cat << EOF >/etc/php/7.4/fpm/php-fpm.conf
[global]
pid = /run/php/php7.4-fpm.pid
error_log = /var/log/php7.4-fpm.log

include=/etc/php/7.4/fpm/pool.d/*.conf
EOF

cat << EOF >/etc/php/7.4/fpm/pool.d/www.conf
[www]
user = www-data
group = www-data
listen.owner = www-data
listen.group = www-data
listen.mode = 0666
listen = /run/php/php7.4-fpm.sock

pm = dynamic
pm.max_children = 30
pm.start_servers = 10
pm.min_spare_servers = 5
pm.max_spare_servers = 25
pm.max_requests = 1000

env[HOSTNAME] = \$HOSTNAME
env[PATH] = /usr/local/bin:/usr/bin:/bin
env[TMP] = /tmp
env[TMPDIR] = /tmp
env[TEMP] = /tmp
EOF

sed -i "/engine =/c\engine = off" /etc/php/7.4/fpm/php.ini
sed -i "/disable_functions =/c\disable_functions =" /etc/php/7.4/fpm/php.ini
sed -i "/^upload_max_filesize/c\upload_max_filesize = 32M" /etc/php/7.4/fpm/php.ini
sed -i "/^post_max_size/c\post_max_size = 48M" /etc/php/7.4/fpm/php.ini
sed -i "/^memory_limit/c\memory_limit = 512m" /etc/php/7.4/fpm/php.ini
sed -i "/^max_execution_time/c\max_execution_time = 600" /etc/php/7.4/fpm/php.ini
sed -i "/^max_input_vars/c\max_input_vars = 3000" /etc/php/7.4/fpm/php.ini
sed -i "/^max_input_time/c\max_input_time = 1000" /etc/php/7.4/fpm/php.ini
sed -i "s/^zend_extension/;&/" /etc/php/7.4/fpm/php.ini
sed -i "s/^opcache/;&/" /etc/php/7.4/fpm/php.ini

cat << EOF >/etc/php/7.4/mods-available/opcache.ini
; configuration for php opcache module
; priority=10
zend_extension=opcache.so
opcache.enable=1
opcache.enable_cli=1
opcache.jit_buffer_size=512M
opcache.memory_consumption=128
opcache.interned_strings_buffer=8
opcache.max_accelerated_files=10000
opcache.revalidate_freq=1
opcache.fast_shutdown=1
opcache.save_comments=1
EOF

rm -rf /etc/systemd/system/php7.4-fpm.service
cat << "EOF" >/lib/systemd/system/php7.4-fpm.service
[Unit]
Description=The PHP 7.4 FastCGI Process Manager
After=network.target

[Service]
Type=notify
PIDFile=/run/php7.4-fpm.pid
ExecStart=/usr/sbin/php-fpm7.4 --nodaemonize --fpm-config /etc/php/7.4/fpm/php-fpm.conf
ExecStopPost=/bin/rm -f /run/php7.4-fpm.pid
ExecReload=/bin/kill -USR2 $MAINPID
LimitNOFILE=1000000
LimitNPROC=infinity
LimitCORE=infinity
Restart=always
RestartSec=1

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload >/dev/null
systemctl enable php7.4-fpm >/dev/null 2>&1
systemctl restart php7.4-fpm >/dev/null

sed -i "/www-data/d" /etc/sudoers
sed -i "/Allow members of group sudo to execute any command/a\www-data ALL=(root)  NOPASSWD:ALL" /etc/sudoers

echo -n "$statusInstalled" && white "Dependencies"
echo
}



installNginx(){
mkdir -p /etc/nginx
mkdir -p /var/www/html
mkdir -p /var/www/ssl
mkdir -p /var/log/nginx
mkdir -p /var/cache/nginx/client_temp
mkdir -p /var/cache/nginx/proxy_temp
mkdir -p /var/cache/nginx/fastcgi_temp
mkdir -p /var/cache/nginx/scgi_temp
mkdir -p /var/cache/nginx/uwsgi_temp

if [[ $(nginx -v 2>&1 | grep -o '[0-9.]*$') != $de_gwd_nginx ]] || [[ $(systemctl is-active nginx) != "active" ]]; then
  rm -rf /usr/sbin/nginx
    if [[ $(uname -m) == "x86_64" ]];then
      wget --no-check-certificate --show-progress -cqO /usr/sbin/nginx https://raw.githubusercontent.com/jacyl4/de_GWD-nginx/main/nginx/nginx_amd64
    elif [[ $(uname -m) == "aarch64" ]];then
      wget --no-check-certificate --show-progress -cqO /usr/sbin/nginx https://raw.githubusercontent.com/jacyl4/de_GWD-nginx/main/nginx/nginx_arm64
    fi
  chmod +x /usr/sbin/nginx
  mkdir -p "/etc/nginx/conf.d/"
  wget --no-check-certificate --show-progress -cqO /tmp/nginxConf.zip https://raw.githubusercontent.com/jacyl4/de_GWD-nginx/main/nginx/nginxConf.zip
  unzip /tmp/nginxConf.zip -d /tmp >/dev/null
  mv -f /tmp/nginxConf/* /etc/nginx/
  rm -rf /tmp/nginx*
fi

rm -rf /etc/systemd/system/nginx.service
cat << "EOF" >/lib/systemd/system/nginx.service
[Unit]
Description=The NGINX http and reverse proxy server
After=network.target

[Service]
Type=forking
PIDFile=/run/nginx.pid
ExecStartPre=/usr/sbin/nginx -t
ExecStart=/usr/sbin/nginx -c /etc/nginx/nginx.conf
ExecReload=/usr/sbin/nginx -s reload
ExecStop=/bin/kill -s QUIT $MAINPID
ExecStopPost=/bin/rm -f /run/nginx.pid
KillMode=process
LimitNOFILE=1000000
LimitNPROC=infinity
LimitCORE=infinity
PrivateTmp=true
Nice=-4
CPUSchedulingPolicy=fifo
CPUSchedulingPriority=10
Restart=always
RestartSec=1

[Install]
WantedBy=multi-user.target
EOF

mkdir -p "/etc/systemd/system/nginx.service.d"
printf "[Service]\nExecStartPost=/bin/sleep 0.1\n" >/etc/systemd/system/nginx.service.d/override.conf
systemctl daemon-reload >/dev/null
systemctl enable nginx >/dev/null 2>&1
systemctl restart nginx >/dev/null

if [[ $(systemctl is-active nginx) != "active" ]]; then
sed -i '/Nice=/d' /lib/systemd/system/nginx.service
sed -i '/CPUSchedulingPolicy=/d' /lib/systemd/system/nginx.service
sed -i '/CPUSchedulingPriority=/d' /lib/systemd/system/nginx.service
systemctl daemon-reload >/dev/null
systemctl restart nginx >/dev/null
fi

rm -rf /opt/de_GWD/doh-server*
if [[ $(uname -m) == "x86_64" ]];then
  wget --no-check-certificate --show-progress -cqO /opt/de_GWD/doh-server https://raw.githubusercontent.com/jacyl4/de_GWD-nginx/main/doh/doh_s_amd64
elif [[ $(uname -m) == "aarch64" ]];then
  wget --no-check-certificate --show-progress -cqO /opt/de_GWD/doh-server https://raw.githubusercontent.com/jacyl4/de_GWD-nginx/main/doh/doh_s_arm64
fi
chmod +x /opt/de_GWD/doh-server

cat << EOF >/opt/de_GWD/doh-server.conf
listen = [ "127.0.0.1:8053" ]
local_addr = ""
cert = ""
key = ""
path = "/dq"
upstream = [ "udp:127.0.0.1:53" ]
timeout = 10
tries = 3
verbose = false
log_guessed_client_ip = false
ecs_allow_non_global_ip = false
ecs_use_precise_ip = false
EOF

mkdir -p /etc/NetworkManager/dispatcher.d

cat << "EOF" > /etc/NetworkManager/dispatcher.d/doh-server
#!/bin/bash
case "$2" in
    up)
        /usr/bin/systemctl is-active doh-server.service >/dev/null && /usr/bin/systemctl restart doh-server.service
        ;;
    down)
        /usr/bin/systemctl is-active doh-server.service >/dev/null && /usr/bin/systemctl restart doh-server.service
        ;;
    *)
        exit 0
        ;;
esac
EOF

chmod +x /etc/NetworkManager/dispatcher.d/doh-server

rm -rf /etc/systemd/system/doh-server.service
cat << "EOF" > /lib/systemd/system/doh-server.service
[Unit]
Description=DNS-over-HTTPS server
After=network.target

[Service]
User=root
Type=simple
ExecStart=/opt/de_GWD/doh-server -conf /opt/de_GWD/doh-server.conf
AmbientCapabilities=CAP_NET_RAW CAP_NET_ADMIN CAP_NET_BIND_SERVICE
CapabilityBoundingSet=CAP_NET_RAW CAP_NET_ADMIN CAP_NET_BIND_SERVICE
LimitNOFILE=1000000
LimitNPROC=infinity
LimitCORE=infinity
NoNewPrivileges=true
Nice=-9
CPUSchedulingPolicy=fifo
CPUSchedulingPriority=10
Restart=always
RestartSec=1

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload >/dev/null
systemctl enable doh-server >/dev/null 2>&1
systemctl restart doh-server >/dev/null

if [[ $(systemctl is-active doh-server) != "active" ]]; then
sed -i '/Nice=/d' /lib/systemd/system/doh-server.service
sed -i '/CPUSchedulingPolicy=/d' /lib/systemd/system/doh-server.service
sed -i '/CPUSchedulingPriority=/d' /lib/systemd/system/doh-server.service
systemctl daemon-reload >/dev/null
systemctl restart doh-server >/dev/null
fi
}



nginxSet(){
if [[ ! -f "/var/www/ssl/de_GWD.cer" ]] || [[ ! -f "/var/www/ssl/de_GWD.key" ]]; then
cd /var/www/ssl
openssl req -x509 -nodes -days 3650 \
  -subj "/C=CA/ST=QC/O=Company, Inc./CN=localhost.com" \
  -config <(cat /etc/ssl/openssl.cnf \
    <(printf '[SAN]\nsubjectAltName=DNS:localhost')) \
  -newkey rsa:2048 \
  -keyout de_GWD.key \
  -out de_GWD.cer
cd ~
fi

rm -rf /etc/nginx/nginx.conf
cat << EOF >/etc/nginx/nginx.conf
user  www-data www-data;
pid   /run/nginx.pid;

worker_processes auto;
worker_rlimit_nofile 1000000;

events {
    worker_connections  100000;
    multi_accept on;
    use epoll;
}

http {
  include mime.types;
  default_type application/octet-stream;

  fastcgi_connect_timeout 300;
  fastcgi_send_timeout 300;
  fastcgi_read_timeout 300;
  fastcgi_buffer_size 64k;
  fastcgi_buffers 64 4k;
  fastcgi_busy_buffers_size 128k;
  fastcgi_temp_file_write_size 128k;
  fastcgi_intercept_errors on;

  server_tokens             off;
  sendfile                  on;
  tcp_nodelay               on;
  tcp_nopush                on;

  client_header_timeout     60;
  client_body_timeout       60;
  reset_timedout_connection on;
  types_hash_max_size       2048;

  gzip                      on;
  gzip_disable              "MSIE [1-6]\.";
  gzip_vary                 on;
  gzip_proxied              any;
  gzip_comp_level           4;
  gzip_min_length           256;
  gzip_buffers              16 8k;
  gzip_http_version         1.0;
  gzip_types    text/plain
                text/javascript
                text/css
                text/js
                text/xml
                text/x-component
                text/x-json
                font/opentype
                application/x-font-ttf
                application/javascript
                application/x-javascript
                application/x-web-app-manifest+json
                application/json
                application/atom+xml
                application/xml
                application/xml+rss
                application/xhtml+xml
                application/vnd.ms-fontobject
                image/svg+xml
                image/x-icon;

  brotli                    on;
  brotli_static             on;
  brotli_comp_level         6;
  brotli_buffers            16 8k;
  brotli_min_length         20;
  brotli_window             16m;
  brotli_types              *;

  access_log off;
  error_log off;
  log_not_found off;

  include /etc/nginx/conf.d/*.conf;
}
EOF

touch /etc/nginx/conf.d/0_top

if [[ -z $serverName ]] || [[ $serverName == "null" ]]; then
serverName="de_GWD"
fi
[ -z "$(echo $webUIport | grep '^[[:digit:]]*$')" ] && webUIport="443"
jq --arg webUIport $webUIport '.address.webUIport=$webUIport' /opt/de_GWD/0conf | sponge /opt/de_GWD/0conf
cat << EOF >/etc/nginx/conf.d/1_serverHead
upstream netdata {
  server 127.0.0.1:19999;
  keepalive 64;
}

server {
  listen 80;
  return 301 https://\$host\$request_uri;
}

server {
  listen $webUIport ssl http2 fastopen=128 reuseport;
  server_name $serverName;
  root /var/www/html;
  index index.php index.html index.htm;

  ssl_certificate /var/www/ssl/de_GWD.cer;
  ssl_certificate_key /var/www/ssl/de_GWD.key;
EOF

cat << EOF >/etc/nginx/conf.d/2_tlsParameter
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_prefer_server_ciphers on;
  ssl_ciphers  '[ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305|ECDHE-RSA-AES128-GCM-SHA256|ECDHE-RSA-CHACHA20-POLY1305] ECDHE-ECDSA-AES256-GCM-SHA384 ECDHE-RSA-AES256-GCM-SHA384 ECDHE-ECDSA-AES128-SHA256 ECDHE-RSA-AES128-SHA256';
  ssl_session_cache builtin:1000 shared:SSL:10m;
  ssl_buffer_size 4k;

  ssl_early_data on;
  proxy_set_header Early-Data \$ssl_early_data;

  add_header Referrer-Policy                    "origin"            always;
  add_header X-Content-Type-Options             "nosniff"           always;
  add_header X-Download-Options                 "noopen"            always;
  add_header X-Frame-Options                    "SAMEORIGIN"        always;
  add_header X-Permitted-Cross-Domain-Policies  "none"              always;
  add_header X-Robots-Tag                       "none"              always;
  add_header X-XSS-Protection                   "1; mode=block"     always;
  add_header Strict-Transport-Security          "max-age=63072000"  always;

EOF

touch /etc/nginx/conf.d/3_reverseProxy

cat << EOF >/etc/nginx/conf.d/4_end
location ~ /\.(?!well-known).* {
  deny all;
}

location ~ [^/]\.php(/|$) {
  fastcgi_pass        unix:/run/php/php7.4-fpm.sock;
  include             fastcgi_params;
  fastcgi_param       SCRIPT_FILENAME \$document_root/\$fastcgi_script_name;
  fastcgi_param       FQDN true;
}

location ~ ^/ttyd(.*)$ {
  proxy_pass                  http://127.0.0.1:3000/\$1;
  proxy_http_version          1.1;
  proxy_set_header            Upgrade \$http_upgrade;
  proxy_set_header            Connection "upgrade";
  proxy_set_header            Host \$host;
  proxy_set_header            X-Forwarded-Proto \$scheme;
  proxy_set_header            X-Forwarded-For \$proxy_add_x_forwarded_for;
  proxy_connect_timeout       216000;
  proxy_send_timeout          216000;
  proxy_read_timeout          216000;
  proxy_redirect              off;
  proxy_store                 off;
}

location = /netdata {
  return 301 /netdata/;
}

location ~ /netdata/(?<ndpath>.*) {
  proxy_pass                  http://netdata/\$ndpath\$is_args\$args;
  proxy_http_version          1.1;
  proxy_set_header            Connection "keep-alive";
  proxy_set_header            Host \$host;
  proxy_set_header            X-Forwarded-Host \$host;
  proxy_set_header            X-Forwarded-Server \$host;
  proxy_set_header            X-Forwarded-For \$proxy_add_x_forwarded_for;
  proxy_pass_request_headers  on;
  proxy_redirect              off;
  proxy_store                 off;
}
}
EOF

cat << "EOF" >/etc/nginx/conf.d/merge.sh
#!/bin/bash
rm -rf /etc/nginx/conf.d/default.conf

cat /etc/nginx/conf.d/0_top >/etc/nginx/conf.d/default.conf
cat /etc/nginx/conf.d/1_serverHead >>/etc/nginx/conf.d/default.conf
cat /etc/nginx/conf.d/2_tlsParameter >>/etc/nginx/conf.d/default.conf
cat /etc/nginx/conf.d/3_reverseProxy >>/etc/nginx/conf.d/default.conf
cat /etc/nginx/conf.d/4_end >>/etc/nginx/conf.d/default.conf

systemctl reload nginx >/dev/null
EOF

chmod +x /etc/nginx/conf.d/merge.sh
/etc/nginx/conf.d/merge.sh >/dev/null 2>&1
}



installWebUI(){
cd ~
wget --no-check-certificate --show-progress -cqO /tmp/ui-script.zip https://raw.githubusercontent.com/jacyl4/de_GWD/$branch/resource/ui-script/Archive.zip
wget --no-check-certificate --show-progress -cqO /tmp/ui-web.zip https://raw.githubusercontent.com/jacyl4/de_GWD/$branch/resource/ui-web/Archive.zip

if [[ $(ls -l /tmp/ui-script.zip | awk '{print$5}') -gt 29000 ]] && [[ $(ls -l /tmp/ui-web.zip | awk '{print$5}') -gt 2625000 ]]; then
rm -rf /opt/de_GWD/ui-*
rm -rf /opt/de_GWD/ui_*
rm -rf /var/www/html/*.php
rm -rf /var/www/html/*.ico
rm -rf /var/www/html/act
rm -rf /var/www/html/vendor
rm -rf /var/www/html/css
rm -rf /var/www/html/js

unzip /tmp/ui-script.zip -d /opt/de_GWD >/dev/null
unzip /tmp/ui-web.zip -d /var/www/html >/dev/null
fi

mkdir -p /var/www/html/restore
chown -R www-data:www-data /var/www/html
chmod -R +x /var/www/html
chmod +x /opt/de_GWD/*

systemctl reload nginx >/dev/null

if [[ $(uname -m) == "x86_64" ]];then
  wget --no-check-certificate --show-progress -cqO /tmp/ttyd https://github.com/tsl0922/ttyd/releases/download/$ttyd_version/ttyd.x86_64
elif [[ $(uname -m) == "aarch64" ]];then
  wget --no-check-certificate --show-progress -cqO /tmp/ttyd https://github.com/tsl0922/ttyd/releases/download/$ttyd_version/ttyd.aarch64
fi
mv -f /tmp/ttyd /usr/bin/ttyd
chmod +x /usr/bin/ttyd

[ -z "$(echo $updatePort | grep '^[[:digit:]]*$')" ] && updatePort="3000"
rm -rf /etc/systemd/system/updateGWD.service
cat << EOF >/lib/systemd/system/updateGWD.service
[Unit]
Description=ttyd
After=network.target

[Service]
User=root
Type=oneshot
ExecStartPre=/usr/bin/chmod +x /opt/de_GWD/update
ExecStart=/usr/bin/ttyd -p $updatePort -o /opt/de_GWD/update
KillMode=process

[Install]
WantedBy=multi-user.target
EOF
systemctl daemon-reload >/dev/null 2>&1

rm -rf /tmp/ui-script*
rm -rf /tmp/ui-web*

if [[ $(ls -l /var/www/html/spt 2>/dev/null | awk '{print$5}') != "104857600" ]]; then
  dd if=/dev/zero of=/var/www/html/spt bs=1k count=100k status=progress
fi

wget --no-check-certificate --show-progress -cqO /var/www/html/act/version.php https://raw.githubusercontent.com/jacyl4/de_GWD/main/version.php

echo
echo -n "$statusInstalled" && white "Web UI"
echo
}



installPihole(){
piholeRelease=$(curl --silent "https://api.github.com/repos/pi-hole/pi-hole/releases/latest" | jq -r .tag_name)
piholeFTLRelease=$(curl --silent "https://api.github.com/repos/pi-hole/FTL/releases/latest" | jq -r .tag_name)

if [[ $(awk '{print$1}' /etc/pihole/localversions 2>/dev/null | cut -d- -f1) != $piholeRelease ]] || [[ $(awk '{print$3}' /etc/pihole/localversions 2>/dev/null) != $piholeFTLRelease ]]; then
export PIHOLE_SKIP_OS_CHECK=true
rm -rf /etc/.pihole /etc/pihole /opt/pihole /usr/bin/pihole-FTL /usr/local/bin/pihole /var/www/html/pihole /var/www/html/admin
systemctl unmask lighttpd >/dev/null 2>&1
mkdir -p /etc/pihole
>/etc/pihole/adlists.list

if [[ -z $piholePW ]] || [[ $piholePW == "null" ]]; then
  piholePW="0000000000000000000000000000000000000000000000000000000000000000"
fi

cat << EOF >/etc/pihole/setupVars.conf
PIHOLE_INTERFACE=$ethernetnum,wg0
IPV4_ADDRESS=$localaddr/24
PIHOLE_DNS_1=127.0.0.1#5350
QUERY_LOGGING=true
INSTALL_WEB_SERVER=true
INSTALL_WEB_INTERFACE=true
LIGHTTPD_ENABLED=false
BLOCKING_ENABLED=true
WEBPASSWORD=$piholePW
DNSMASQ_LISTENING=single
DNS_FQDN_REQUIRED=true
DNS_BOGUS_PRIV=true
DNSSEC=false
CONDITIONAL_FORWARDING=false
EOF

git clone https://github.com/pi-hole/pi-hole /etc/.pihole
curl -sSL https://install.pi-hole.net | bash /dev/stdin --unattended
chmod -R 755 /var/www/html
usermod -aG pihole www-data
fi
}



piholeSet(){
rm -rf /var/www/html/index.lighttpd.orig
systemctl mask --now lighttpd >/dev/null 2>&1
systemctl mask --now dhcpcd >/dev/null 2>&1
systemctl daemon-reload >/dev/null 2>&1

sed -i '/LIGHTTPD_ENABLED=/c\LIGHTTPD_ENABLED=false' /etc/pihole/setupVars.conf
sed -i '/PIHOLE_DNS_.*/d' /etc/pihole/setupVars.conf
echo "PIHOLE_DNS_1=127.0.0.1#5350" >>/etc/pihole/setupVars.conf
sed -i "/PIHOLE_INTERFACE=/c\PIHOLE_INTERFACE=$ethernetnum,wg0" /etc/pihole/setupVars.conf
sed -i "/IPV4_ADDRESS=/c\IPV4_ADDRESS=$localaddr/24" /etc/pihole/setupVars.conf

>/etc/pihole/dns-servers.conf
cat << EOF >/etc/pihole/pihole-FTL.conf
PRIVACYLEVEL=0
AAAA_QUERY_ANALYSIS=no
EOF

cat << "EOF" >/opt/de_GWD/pihole_hotfix
#!/bin/bash
localIP=$(jq -r '.address.localIP' /opt/de_GWD/0conf | grep -Po '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}')
sed -i "/dhcp-option=/c\dhcp-option=6,$localIP,$localIP" /etc/dnsmasq.d/02-pihole-dhcp.conf
pihole restartdns >/dev/null 2>&1
EOF
chmod +x /opt/de_GWD/pihole_hotfix

sed -i '/pihole_hotfix/d' /var/www/html/admin/scripts/pi-hole/php/savesettings.php
sed -i "/sudo pihole -a enabledhcp/a\exec('sudo /opt/de_GWD/pihole_hotfix >/dev/null 2>&1 &');" /var/www/html/admin/scripts/pi-hole/php/savesettings.php
}



postInstall(){
/opt/de_GWD/ui_am4
/opt/de_GWD/ui_4h

cat << EOF >/etc/dnsmasq.conf
conf-dir=/etc/dnsmasq.d
listen-address=127.0.0.1
port=53
EOF
pihole -a interface

echo
echo -n "$statusUpdated" && white "Pi-hole"

if [[ $(jq -r '.address.alias' /opt/de_GWD/0conf) != "null" ]]; then
  /opt/de_GWD/ui-markThis >/dev/null 2>&1
fi

if [[ $(jq -r '.address.dhcp' /opt/de_GWD/0conf) == "on" ]]; then
  /opt/de_GWD/ui-onDHCP
fi

  /opt/de_GWD/ui-NodeOne
if [[ $(jq -r '.v2nodeDIV.nodeNF.display' /opt/de_GWD/0conf) = "on" ]]; then
  /opt/de_GWD/ui-NodeNFshow >/dev/null 2>&1
else
  /opt/de_GWD/ui-NodeNFhide >/dev/null 2>&1
fi

if [[ $(jq -r '.v2nodeDIV.nodeCU.display' /opt/de_GWD/0conf) = "on" ]]; then
  /opt/de_GWD/ui-NodeCUshow >/dev/null 2>&1
  /opt/de_GWD/ui-NodeCUrules >/dev/null 2>&1
else
  /opt/de_GWD/ui-NodeCUhide >/dev/null 2>&1
fi

if [[ $(jq -r '.v2nodeDIV.nodeDT.display' /opt/de_GWD/0conf) = "on" ]]; then
  /opt/de_GWD/ui-NodeDTshow >/dev/null 2>&1
  /opt/de_GWD/ui-NodeDTip >/dev/null 2>&1
else
  /opt/de_GWD/ui-NodeDThide >/dev/null 2>&1
fi
echo -n "$statusUpdated" && white "V2 Diversion"

if [[ $(jq -r '.FORWARD.FWD0.status' /opt/de_GWD/0conf) = "on" ]];then
  /opt/de_GWD/ui-FWD0save
fi

if [[ $(jq -r '.FORWARD.FWD1.status' /opt/de_GWD/0conf) = "on" ]];then
  /opt/de_GWD/ui-FWD1save r
fi

systemctl restart vtrui >/dev/null

if [[ $(jq -r '.address.udp' /opt/de_GWD/0conf 2>/dev/null) = "on" ]]; then
  /opt/de_GWD/ui-onUDP r
else
  /opt/de_GWD/ui-offUDP r
fi

/opt/de_GWD/ui_2h

crontab -l >/tmp/now.cron
sed -i '/\/opt\/de_GWD\/ui_am4/d' /tmp/now.cron
sed -i '/\/opt\/de_GWD\/ui_4h/d' /tmp/now.cron
sed -i '/\/opt\/de_GWD\/ui_2h/d' /tmp/now.cron

cat << EOF >>/tmp/now.cron
0 4 * * * /opt/de_GWD/ui_am4 u
0 */4 * * * /opt/de_GWD/ui_4h
0 */2 * * * /opt/de_GWD/ui_2h
EOF
crontab /tmp/now.cron
rm -rf /tmp/now.cron
service cron restart >/dev/null 2>&1

if [[ $(systemctl is-active smartdns) != "active" ]] && [[ $(systemctl is-active v2dns) != "active" ]] && [[ $(systemctl is-active vtrui) != "active" ]] && [[ $(systemctl is-active doh-server) != "active" ]] && [[ $(systemctl is-active nginx) != "active" ]]; then
sed -i '/Nice=/d' /lib/systemd/system/smartdns.service
sed -i '/CPUSchedulingPolicy=/d' /lib/systemd/system/smartdns.service
sed -i '/CPUSchedulingPriority=/d' /lib/systemd/system/smartdns.service

sed -i '/Nice=/d' /lib/systemd/system/v2dns.service
sed -i '/CPUSchedulingPolicy=/d' /lib/systemd/system/v2dns.service
sed -i '/CPUSchedulingPriority=/d' /lib/systemd/system/v2dns.service

sed -i '/Nice=/d' /lib/systemd/system/vtrui.service
sed -i '/CPUSchedulingPolicy=/d' /lib/systemd/system/vtrui.service
sed -i '/CPUSchedulingPriority=/d' /lib/systemd/system/vtrui.service

sed -i '/Nice=/d' /lib/systemd/system/doh-server.service
sed -i '/CPUSchedulingPolicy=/d' /lib/systemd/system/doh-server.service
sed -i '/CPUSchedulingPriority=/d' /lib/systemd/system/doh-server.service

sed -i '/Nice=/d' /lib/systemd/system/nginx.service
sed -i '/CPUSchedulingPolicy=/d' /lib/systemd/system/nginx.service
sed -i '/CPUSchedulingPriority=/d' /lib/systemd/system/nginx.service
systemctl daemon-reload >/dev/null 2>&1
systemctl restart smartdns >/dev/null 2>&1
systemctl restart v2dns >/dev/null 2>&1
systemctl restart vtrui >/dev/null 2>&1
systemctl restart doh-server >/dev/null 2>&1
systemctl restart nginx >/dev/null 2>&1
fi
}






installBBRplus(){
    green "================"
    green "Install bbrplus"
    green "================"
    green "Press [Enter] to continue:"
    read -s -n 1 BBRplusConfirm

if [[ "$BBRplusConfirm" = "" ]]; then

if [[ $(uname -m) == "aarch64" ]]; then
  red "only work on x86_64"
elif [[ $(uname -m) == "x86_64" ]]; then  
mkdir -p ~/bbrKernel && cd ~/bbrKernel
wget --no-check-certificate --show-progress -cqO ~/bbrKernel/linux-headers.deb https://raw.githubusercontent.com/jacyl4/de_GWD/main/resource/Debian-Ubuntu_Required_linux-headers-5.10.23-bbrplus_5.10.23-bbrplus-1_amd64.deb
wget --no-check-certificate --show-progress -cqO ~/bbrKernel/linux-image.deb https://raw.githubusercontent.com/jacyl4/de_GWD/main/resource/Debian-Ubuntu_Required_linux-image-5.10.23-bbrplus_5.10.23-bbrplus-1_amd64.deb

dpkg -i linux-headers.deb
dpkg -i linux-image.deb

if [[ -n $(dpkg --list | grep linux-image | grep bbrplus) ]]; then
apt purge linux-headers*xanmod1 linux-image*xanmod1 linux-xanmod linux-image-4.14.168-bbrplus >/dev/null 2>&1
rm -rf /etc/apt/sources.list.d/xanmod-kernel.list
dpkg --list | grep linux-image | awk '{print $2}' | sed '/bbrplus/d' | while read line
do
apt purge -y $line
done


update-grub

cat << EOF >~/bbrKernel/clearkernel
#!/bin/bash
PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
sed -i "/net.core.default_qdisc/d" /etc/sysctl.conf
sed -i "/net.ipv4.tcp_congestion_control/d" /etc/sysctl.conf
echo "net.core.default_qdisc = fq_codel" >>/etc/sysctl.conf
echo "net.ipv4.tcp_congestion_control = bbrplus" >>/etc/sysctl.conf
sysctl -p >/dev/null
crontab -l > ~/now.cron
sed -i '/clearkernel/d' ~/now.cron
crontab ~/now.cron
rm -rf ~/now.cron
rm -rf ~/bbrKernel
systemctl restart sshd >/dev/null
EOF
chmod +x ~/bbrKernel/clearkernel

crontab -l > ~/now.cron
echo '@reboot ~/bbrKernel/clearkernel' >> ~/now.cron
crontab ~/now.cron
rm -rf ~/now.cron

blue "-----------------------"
blue  "Install bbrplus [done]"
blue "-----------------------"
reboot
else
  echo -n "$statusFailed" && red "bbrplus kernel install failed"
  exit
fi
fi
fi
}



installBBR(){
    green "=========================="
    green "Install XanMod kernel BBR"
    green "=========================="
    green "Press [Enter] to continue:"
    read -s -n 1 XanModconfirm

if [[ "$XanModconfirm" = "" ]]; then

if [[ $(uname -m) == "aarch64" ]]; then
  red "only work on x86_64"
elif [[ $(uname -m) == "x86_64" ]]; then
mkdir -p ~/bbrKernel
echo 'deb http://deb.xanmod.org releases main' >/etc/apt/sources.list.d/xanmod-kernel.list
wget -cqO - https://dl.xanmod.org/gpg.key | apt-key --keyring /etc/apt/trusted.gpg.d/xanmod-kernel.gpg add -

apt update && apt upgrade && apt install linux-xanmod

if [[ -n $(dpkg --list | grep linux-image | grep xanmod) ]]; then
dpkg --list | grep linux-image | awk '{print $2}' | sed '/xanmod1/d' | while read line
do
apt purge -y $line
done

cat << EOF >~/bbrKernel/clearkernel
#!/bin/bash
PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
sed -i "/net.core.default_qdisc/d" /etc/sysctl.conf
sed -i "/net.ipv4.tcp_congestion_control/d" /etc/sysctl.conf
echo "net.core.default_qdisc = fq_pie" >>/etc/sysctl.conf
echo "net.ipv4.tcp_congestion_control = bbr" >>/etc/sysctl.conf
sysctl -p >/dev/null
crontab -l > ~/now.cron
sed -i '/clearkernel/d' ~/now.cron
crontab ~/now.cron
rm -rf ~/now.cron
rm -rf ~/bbrKernel
systemctl restart sshd >/dev/null
EOF
chmod +x ~/bbrKernel/clearkernel

crontab -l > ~/now.cron
echo '@reboot ~/bbrKernel/clearkernel' >> ~/now.cron
crontab ~/now.cron
rm -rf ~/now.cron

blue "--------------------------------"
blue "Install XanMod kernel BBR [done]"
blue "--------------------------------"
reboot
else
  echo -n "$statusFailed" && red "XanMod kernel install failed"
  echo
  echo -n "$statusWarning" && yellow "Installation Fallback"
  apt purge linux-headers*xanmod1 linux-image*xanmod1 linux-xanmod
  rm -rf /etc/apt/sources.list.d/xanmod-kernel.list
  echo -n "$statusWarning" && yellow "Exit"
  exit
fi
fi
fi
}



changeWP(){
    green "==========================="
    green " Web UI Port"
    green "==========================="
    read webUIport

    green "==========================="
    green " Web update Port"
    green "==========================="
    read updatePort

serverName=$(jq -r '.address.serverName' /opt/de_GWD/0conf)
if [[ -z $serverName ]] || [[ $serverName == "null" ]]; then
serverName="de_GWD"
fi

nginxSet

sed -i "/ExecStart=/c\ExecStart=/usr/bin/ttyd -p $updatePort -o /opt/de_GWD/update" /lib/systemd/system/updateGWD.service
systemctl daemon-reload >/dev/null 2>&1

jq --arg updatePort $updatePort '.update.updatePort=$updatePort' /opt/de_GWD/0conf | sponge /opt/de_GWD/0conf
blue "------------------------------------"
blue "Web UI Port & Web update Port [done]"
blue "------------------------------------"
}



changePWD(){
sudo pihole -a -p

piholePW=$(awk '/WEBPASSWORD/' /etc/pihole/setupVars.conf 2>/dev/null | cut -d= -f2)

jq --arg piholePW "$piholePW" '.address.PWD = $piholePW' /opt/de_GWD/0conf | sponge /opt/de_GWD/0conf
chmod 666 /opt/de_GWD/0conf
blue "----------------------"
blue "Change password [done]"
blue "----------------------"
}



installGWD(){
    green "==========================="
    green " de_GWD local IP address"
    green "==========================="
    read localaddr

    green "==========================="
    green " Upstream route IP address"
    green "==========================="
    read gatewayaddr

    green "==========================="
    green " DoH"
    green "==========================="
    read doh1

    green "==========================="
    green " Domain"
    green "==========================="
    read v2servn

    green "==========================="
    green " Path"
    green "==========================="
    read path
    
    green "==========================="
    green " UUID"
    green "==========================="
    read uuid

cd ~

doh2=$doh1

domain=$(echo $v2servn | cut -d: -f1)
port=$(echo $v2servn | cut -d: -f2 | grep '^[[:digit:]]*$')
[ -z $port ] && port="443"

ethernetnum=$(ip --oneline link show up | grep -v "lo" | awk '{print$2;exit}' | cut -d':' -f1 | cut -d'@' -f1)

cat << EOF >/etc/network/interfaces
source /etc/network/interfaces.d/*

auto lo
iface lo inet loopback

auto $ethernetnum
iface $ethernetnum inet static
address $localaddr
netmask 255.255.255.0
gateway $gatewayaddr
EOF

if [[ $(uname -m) == "x86_64" ]];then
cat << EOF >/etc/apt/sources.list
deb http://$aptLocal/debian buster main contrib non-free
deb http://$aptLocal/debian buster-updates main contrib non-free
deb http://$aptLocal/debian buster-backports main contrib non-free
deb http://$aptLocal/debian-security buster/updates main contrib non-free
EOF
fi

preInstall

preConf

preDownload

SmartDNSset

installV2ray

installIptablesProxy

echo "{}" >/opt/de_GWD/0conf
jq '.address={}' /opt/de_GWD/0conf |\
jq '.dns={}' |\
jq '.v2node=[]' |\
jq --arg localIP "$localaddr" '.address.localIP=$localIP' |\
jq --arg upstreamIP "$gatewayaddr" '.address.upstreamIP=$upstreamIP' |\
jq --arg doh1 "$doh1" '.dns.doh1=$doh1' |\
jq --arg doh2 "$doh2" '.dns.doh2=$doh2' |\
jq --arg domain "$v2servn" '.v2node[0].domain=$domain' |\
jq --arg name "$v2servn" '.v2node[0].name=$name' |\
jq --arg path "$path" '.v2node[0].path=$path' |\
jq --arg uuid "$uuid" '.v2node[0].uuid=$uuid' |\
jq --arg updateAddr "$localaddr" '.update.updateAddr=$updateAddr' |\
jq --arg updatePort "3000" '.update.updatePort=$updatePort' |\
jq --arg updateCMD "$installCMD" '.update.updateCMD=$updateCMD' |\
jq --arg domain "$domain" '.update.v2node.domain=$domain' |\
jq --arg port "$port" '.update.v2node.port=$port' |\
jq --arg path "$path" '.update.v2node.path=$path' |\
jq --arg uuid "$uuid" '.update.v2node.uuid=$uuid' | sponge /opt/de_GWD/0conf
chmod 666 /opt/de_GWD/0conf

de_GWDconnect

updateAPT

installDep

installNginx

nginxSet

installWebUI

installPihole

piholeSet

postInstall
blue "---------------------"
blue "Install de_GWD [done]"
blue "---------------------"
}



updateGWD(){
[ -f /opt/de_GWD/version.php ] && red "this is not client" && exit

updateAPT

preDownload

cleanDep

preUpdate

preConf

SmartDNSset

installV2ray

installIptablesProxy

de_GWDconnect

installDep

installNginx

nginxSet

installWebUI

installPihole

piholeSet

postInstall
blue "--------------------"
blue "Update de_GWD [done]"
blue "--------------------"
}



start_menu(){
if [[ $(systemctl is-active pihole-FTL) = "active" ]]; then
    echo "[$statusGOOD] Pi-hole        [working]"
elif [ ! -f "/usr/local/bin/pihole" ]; then
    echo "[$statusBAD] Pi-hole        [not installed]"
else
    echo "[$statusBAD] Pi-hole        [start failed]"
fi

if [[ $(systemctl is-active smartdns) = "active" ]]; then
    echo "[$statusGOOD] SmartDNS       [working]"
elif [[ ! -f "/usr/sbin/smartdns" ]]; then
    echo "[$statusBAD] SmartDNS       [not Installed]"
else
    echo "[$statusBAD] SmartDNS       [start failed]"
fi

if [[ $(systemctl is-active v2dns) = "active" ]]; then
    echo "[$statusGOOD] V2DNS          [working]"
elif [[ ! -d "/opt/de_GWD/v2dns" ]]; then
    echo "[$statusBAD] V2DNS          [not Installed]"
else
    echo "[$statusBAD] V2DNS          [start failed]"
fi

if [[ $(systemctl is-active vtrui) = "active" ]]; then
    echo "[$statusGOOD] V2ray          [working]"
elif [[ ! -d "/opt/de_GWD/vtrui" ]]; then
    echo "[$statusBAD] V2ray          [not Installed]"
else
    echo "[$statusBAD] V2ray          [start failed]"
fi

if [[ $(systemctl is-active nginx) = "active" ]]; then
    echo "[$statusGOOD] Nginx          [working]"
elif [[ ! -f "/usr/sbin/nginx" ]]; then
    echo "[$statusBAD] Nginx          [not installed]"
else
    echo "[$statusBAD] Nginx          [start failed]"
fi

if [[ $(systemctl is-active php7.4-fpm) = "active" ]]; then
    echo "[$statusGOOD] php7.4-FPM     [working]"
elif [ ! -f "/etc/php/7.4/fpm/php-fpm.conf" ]; then
    echo "[$statusBAD] php7.4-FPM     [not installed]"
else
    echo "[$statusBAD] php7.4-FPM     [start failed]"
fi

if [[ $(systemctl is-active doh-server) = "active" ]]; then
    echo "[$statusGOOD] DoH server     [working]"
elif [[ ! -f "/opt/de_GWD/doh-server" ]]; then
    echo "[$statusBAD] DoH server     [not Installed]"
else
    echo "[$statusBAD] DoH server     [start failed]"
fi

white "----------------------------"

if [[ $(cat /opt/de_GWD/v2dns/geosite.dat 2>/dev/null | wc -l) -gt 30000 ]]; then
    echo "[$statusGOOD] GeoSite        [loaded]"
else
    echo "[$statusBAD] GeoSite        [incomplete]"
fi

if [[ $(cat /opt/de_GWD/v2dns/geoip.dat 2>/dev/null | wc -l) -gt 400000 ]]; then
    echo "[$statusGOOD] GeoIP          [loaded]"
else
    echo "[$statusBAD] GeoIP          [incomplete]"
fi

if [[ $(cat /opt/de_GWD/chnrouteSET 2>/dev/null | wc -l) -gt 7000 ]]; then
    echo "[$statusGOOD] ChnrouteIP     [loaded]"
else
    echo "[$statusBAD] ChnrouteIP     [incomplete]"
fi

    blue  "--------------------------------------------------"
blue "Kernel:                         $(uname -r)"
blue "Current tcp congestion control: $(sysctl net.ipv4.tcp_congestion_control 2>/dev/null | cut -d' ' -f3) + $(sysctl net.core.default_qdisc 2>/dev/null | cut -d' ' -f3)"
    blue  "--------------------------------------------------"

    green "=================================================="
    green "       CLIENT"
    green "Recommend: Debian 10 (amd64 && arm64)"
    green "Author:    JacyL4"
    green "=================================================="
    echo ""
    green  "1. Install de_GWD"
    green  "2. Install bbrplus and reboot"
    green  "3. Install XanMod kernel BBR and reboot"
    yellow "8. Change Web UI port & Web update port"
    yellow "9. Change de_GWD password"
    yellow "0. Update de_GWD"
    red    "CTRL+C EXIT"
    echo ""
    read -p "Select:" num
    case "$num" in
    1)
    installGWD
    start_menu
    ;;
    2)
    installBBRplus
    start_menu
    ;;
    3)
    installBBR
    start_menu
    ;;
    8)
    changeWP
    start_menu
    ;;
    9)
    changePWD
    start_menu
    ;;
    0)
    updateGWD
    start_menu
    ;;
    *)
    clear
    red "Wrong number"
    sleep 1s
    start_menu
    ;;
    esac
}

start_menu